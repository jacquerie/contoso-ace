{"version":3,"sources":["Chat.js","Dashboard.js","Chats.js","Header.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["Chat","match","this","props","react_default","a","createElement","className","params","id","React","Component","Dashboard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","chats","handleClick","bind","assertThisInitialized","fetchChats","_this2","fetch","method","credentials","then","response","ok","json","setState","rows","i","length","cols","j","push","toCol","Row","chat","_this3","Col","xs","Card","CardBody","CardTitle","tag","customer","full_name","CardText","message","text","Button","onClick","_id","color","_this4","concat","context","router","history","Container","toRows","contextTypes","PropTypes","object","isRequired","Chats","Route","path","exact","component","Header","event","preventDefault","logoutEmployee","Navbar","dark","expand","employee","Nav","navbar","NavItem","first_name","NavLink","Login","handleSubmit","formData","FormData","target","loginEmployee","get","offset","size","Form","onSubmit","FormGroup","Label","for","Input","type","name","placeholder","App","fetchEmployee","email","password","body","JSON","stringify","_this5","BrowserRouter","src_Header_0","render","src_Login_0","assign","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.889f3bab.chunk.js","sourcesContent":["import React from 'react';\n\nclass Chat extends React.Component {\n  render() {\n    const { match } = this.props;\n\n    return (\n      <div className=\"Chat\">\n        <h2>Chat #{match.params.id}</h2>\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardText,\n  CardTitle,\n  Col,\n  Container,\n  Row,\n} from 'reactstrap';\n\nimport './Dashboard.css'\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chats: [],\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchChats();\n  }\n\n  fetchChats() {\n    fetch('/api/chats', {\n      'method': 'GET',\n      'credentials': 'same-origin',\n    }).then(\n      response => response.ok ? response.json() : []\n    ).then(\n      json => this.setState({chats: json})\n    )\n  }\n\n  toRows(chats) {\n    let rows = [];\n\n    for (let i = 0; i < chats.length; i = i + 3) {\n      let cols = [];\n\n      for (let j = i; j < chats.length && j < i + 3; j++) {\n        cols.push(this.toCol(chats[j]));\n      }\n\n      rows.push(<Row>{cols}</Row>);\n    }\n\n    return <div className=\"Rows\">{rows}</div>;\n  }\n\n  toCol(chat) {\n    return (\n      <Col xs=\"4\">\n        <Card>\n          <CardBody>\n            <CardTitle tag=\"h2\">{chat.customer.full_name}</CardTitle>\n            <CardText>{chat.message.text}</CardText>\n            <Button onClick={() => this.handleClick(chat.message._id)}\n              color=\"success\">\n              Accept\n            </Button>\n          </CardBody>\n        </Card>\n      </Col>\n    )\n  }\n\n  handleClick(id) {\n    fetch(`/api/chats/${id}/employees`, {\n      method: 'POST',\n      credentials: 'same-origin',\n    }).then(\n      response => {\n        if (response.ok) {\n          this.context.router.history.push(`/chats/${id}`);\n        }\n      }\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"Dashboard\">\n        <Container>\n          {this.toRows(this.state.chats)}\n        </Container>\n      </div>\n    );\n  }\n}\n\nDashboard.contextTypes = {\n  router: PropTypes.object.isRequired,\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport Chat from './Chat';\nimport Dashboard from './Dashboard';\n\nclass Chats extends React.Component {\n  render() {\n    const { match } = this.props;\n\n    return (\n      <div className=\"Chats\">\n        <Route path={match.path} exact component={Dashboard} />\n        <Route path={`${match.path}/:id`} component={Chat} />\n      </div>\n    );\n  }\n}\n\nexport default Chats;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Container, Nav, NavItem, NavLink, Navbar } from 'reactstrap';\n\nimport './Header.css';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n\n    this.props.logoutEmployee().then(\n      () => this.context.router.history.push('/')\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"Header\">\n        <Navbar dark color=\"primary\" expand=\"xs\">\n          <Container>\n            <h1 className=\"navbar-text\">Contoso ACE</h1>\n            {this.props.employee !== null &&\n              <Nav navbar>\n                <NavItem className=\"navbar-text mr-3\">\n                  Hello, {this.props.employee.first_name}!\n                </NavItem>\n                <NavItem>\n                  <NavLink onClick={this.handleClick}>\n                    Sign Out\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            }\n          </Container>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nHeader.contextTypes = {\n  router: PropTypes.object.isRequired,\n};\n\nexport default Header;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  Col,\n  Container,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  Row,\n} from 'reactstrap';\n\nimport './Login.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    const formData = new FormData(event.target);\n\n    this.props.loginEmployee(\n      formData.get('Email'),\n      formData.get('Password'),\n    ).then(\n      () => this.context.router.history.push('/chats')\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"Login\">\n        <Container>\n          <Row>\n            <Col xs={{ offset: 3, size: 6 }}>\n              <Card>\n                <CardBody>\n                  <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                      <Label for=\"Email\">Email</Label>\n                      <Input\n                        type=\"email\" name=\"Email\" id=\"Email\"\n                        placeholder=\"barbara@contoso.com\"\n                      />\n                    </FormGroup>\n                    <FormGroup>\n                      <Label for=\"Password\">Password</Label>\n                      <Input type=\"password\" name=\"Password\" id=\"Password\" />\n                    </FormGroup>\n                    <Button type=\"submit\" color=\"primary\">Sign In</Button>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nLogin.contextTypes = {\n  router: PropTypes.object.isRequired,\n};\n\nexport default Login;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Chats from './Chats';\nimport Header from './Header';\nimport Login from './Login';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      employee: null,\n    };\n\n    this.loginEmployee = this.loginEmployee.bind(this);\n    this.logoutEmployee = this.logoutEmployee.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchEmployee();\n  }\n\n  fetchEmployee() {\n    return fetch('/api/employees/current', {\n      method: 'GET',\n      credentials: 'same-origin',\n    }).then(\n      response => response.ok ? response.json() : null\n    ).then(\n      json => this.setState({employee: json})\n    );\n  }\n\n  loginEmployee(email, password) {\n    return fetch('/api/employees/login', {\n      method: 'POST',\n      credentials: 'same-origin',\n      body: JSON.stringify({\n        email: email,\n        password: password,\n      }),\n    }).then(\n      response => {\n        if (response.ok) {\n          this.fetchEmployee();\n        }\n      }\n    );\n  }\n\n  logoutEmployee() {\n    return fetch('/api/employees/logout', {\n      method: 'POST',\n      credentials: 'same-origin',\n    }).then(\n      response => response.ok ? null : this.state.employee\n    ).then(\n      json => this.setState({employee: json})\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <div className=\"Router\">\n            <Header\n              employee={this.state.employee}\n              logoutEmployee={this.logoutEmployee}\n            />\n            <Route\n              path=\"/\" exact\n              render={\n                props => <Login\n                           {...props}\n                           loginEmployee={this.loginEmployee}\n                         />\n              }\n            />\n            <Route path=\"/chats\" component={Chats} />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}