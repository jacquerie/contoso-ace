{"version":3,"sources":["Chat.js","Dashboard.js","Chats.js","Header.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["Chat","match","this","props","react_default","a","createElement","className","params","id","React","Component","Dashboard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","chats","fetchChats","_this2","fetch","method","credentials","then","response","json","setState","rows","i","length","cols","j","push","toCol","Row","chat","Col","xs","Card","CardBody","CardTitle","tag","customer","full_name","CardText","message","text","Button","color","Container","toRows","Chats","Route","path","exact","component","concat","Header","Navbar","dark","expand","Nav","navbar","NavItem","NavLink","href","Login","handleSubmit","bind","assertThisInitialized","event","preventDefault","formData","FormData","target","body","JSON","stringify","email","get","password","ok","context","router","history","offset","size","Form","onSubmit","FormGroup","Label","for","Input","type","name","placeholder","contextTypes","PropTypes","object","isRequired","App","src_Header_0","BrowserRouter","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75257812.chunk.js","sourcesContent":["import React from 'react';\n\nclass Chat extends React.Component {\n  render() {\n    const { match } = this.props;\n\n    return (\n      <div className=\"Chat\">\n        <h2>Chat #{match.params.id}</h2>\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n","import React from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardText,\n  CardTitle,\n  Col,\n  Container,\n  Row,\n} from 'reactstrap';\n\nimport './Dashboard.css'\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chats: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchChats();\n  }\n\n  fetchChats() {\n    fetch('/api/chats', {\n      'method': 'GET',\n      'credentials': 'same-origin',\n    }).then(\n      response => response.json()\n    ).then(\n      json => this.setState({chats: json})\n    )\n  }\n\n  toRows(chats) {\n    let rows = [];\n\n    for (let i = 0; i < chats.length; i = i + 3) {\n      let cols = [];\n\n      for (let j = i; j < chats.length && j < i + 3; j++) {\n        cols.push(this.toCol(chats[j]));\n      }\n\n      rows.push(<Row>{cols}</Row>);\n    }\n\n    return <div className=\"Rows\">{rows}</div>;\n  }\n\n  toCol(chat) {\n    return (\n      <Col xs=\"4\">\n        <Card>\n          <CardBody>\n            <CardTitle tag=\"h2\">{chat.customer.full_name}</CardTitle>\n            <CardText>{chat.message.text}</CardText>\n            <Button color=\"success\">Accept</Button>\n          </CardBody>\n        </Card>\n      </Col>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"Dashboard\">\n        <Container>\n          {this.toRows(this.state.chats)}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport Chat from './Chat';\nimport Dashboard from './Dashboard';\n\nclass Chats extends React.Component {\n  render() {\n    const { match } = this.props;\n\n    return (\n      <div className=\"Chats\">\n        <Route path={match.path} exact component={Dashboard} />\n        <Route path={`${match.path}/:id`} component={Chat} />\n      </div>\n    );\n  }\n}\n\nexport default Chats;\n","import React from 'react';\nimport { Container, Nav, NavItem, NavLink, Navbar } from 'reactstrap';\n\nimport './Header.css';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div className=\"Header\">\n        <Navbar dark color=\"primary\" expand=\"xs\">\n          <Container>\n            <h1 className=\"navbar-text\">Contoso ACE</h1>\n            <Nav navbar>\n              <NavItem className=\"navbar-text mr-3\">Hello, Barbara!</NavItem>\n              <NavItem>\n                <NavLink href=\"#\">Sign Out</NavLink>\n              </NavItem>\n            </Nav>\n          </Container>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  Col,\n  Container,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  Row,\n} from 'reactstrap';\n\nimport './Login.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    const formData = new FormData(event.target);\n\n    fetch('/api/employees/login', {\n      method: 'POST',\n      credentials: 'same-origin',\n      body: JSON.stringify({\n        'email': formData.get('Email'),\n        'password': formData.get('Password'),\n      }),\n    }).then(\n      (response) => {\n        if (response.ok) {\n          this.context.router.history.push('/chats');\n        }\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"Login\">\n        <Container>\n          <Row>\n            <Col xs={{ offset: 3, size: 6 }}>\n              <Card>\n                <CardBody>\n                  <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                      <Label for=\"Email\">Email</Label>\n                      <Input\n                        type=\"email\" name=\"Email\" id=\"Email\"\n                        placeholder=\"barbara@contoso.com\"\n                      />\n                    </FormGroup>\n                    <FormGroup>\n                      <Label for=\"Password\">Password</Label>\n                      <Input type=\"password\" name=\"Password\" id=\"Password\" />\n                    </FormGroup>\n                    <Button type=\"submit\" color=\"primary\">Sign In</Button>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nLogin.contextTypes = {\n  router: PropTypes.object.isRequired,\n};\n\nexport default Login;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Chats from './Chats';\nimport Header from './Header';\nimport Login from './Login';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Router>\n          <div className=\"Router\">\n            <Route path=\"/\" exact component={Login} />\n            <Route path=\"/chats\" component={Chats} />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}