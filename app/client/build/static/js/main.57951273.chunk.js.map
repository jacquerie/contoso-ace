{"version":3,"sources":["Chat.js","Dashboard.js","Chats.js","Header.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["Chat","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_id","match","params","id","customer","entities","intent","messages","fetchChat","bind","assertThisInitialized","send","predict","_this2","timer","setInterval","clearInterval","_this3","fetch","concat","method","credentials","then","response","ok","json","setState","text","_this4","body","JSON","stringify","push","_this5","react_default","a","createElement","className","Container","Row","Col","xs","Messages","offset","size","Predictions","Chat_Footer","React","Component","i","length","Message","message","sender","first_name","timestamp_default","time","timestamp","format","Card","outline","color","CardText","Intent","Entities","ListGroup","ListGroupItem","Badge","pill","type","snippet","Footer","_this6","handleSendChange","handleSendClick","handlePredictClick","event","preventDefault","target","value","_this7","Navbar","dark","expand","fixed","InputGroup","Input","onChange","InputGroupAddon","addonType","Button","onClick","Dashboard","chats","handleClick","fetchChats","rows","cols","j","toCol","chat","CardBody","CardTitle","tag","full_name","context","router","history","toRows","contextTypes","PropTypes","object","isRequired","Chats","Route","path","exact","component","Header","logoutEmployee","employee","Nav","navbar","NavItem","NavLink","Login","handleSubmit","formData","FormData","loginEmployee","get","Form","onSubmit","FormGroup","Label","for","name","placeholder","App","fetchEmployee","email","password","BrowserRouter","src_Header_0","render","src_Login_0","assign","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57951273.chunk.js","sourcesContent":["import React from 'react';\nimport Timestamp from 'react-timestamp';\nimport {\n  Badge,\n  Button,\n  Card,\n  CardText,\n  Col,\n  Container,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  ListGroup,\n  ListGroupItem,\n  Navbar,\n  Row,\n} from 'reactstrap';\n\nimport './Chat.css';\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      _id: this.props.match.params.id,\n      customer: {},\n      entities: [],\n      intent: null,\n      messages: [],\n    };\n\n    this.fetchChat = this.fetchChat.bind(this);\n    this.send = this.send.bind(this);\n    this.predict = this.predict.bind(this);\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => this.fetchChat(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  fetchChat() {\n    return fetch(`/api/chats/${this.state._id}`, {\n      method: 'GET',\n      credentials: 'same-origin',\n    }).then(\n      response => response.ok ? response.json() : {\n        _id: this.state._id,\n        customer: {},\n        entities: [],\n        intent: null,\n        messages: [],\n      }\n    ).then(\n      json => this.setState({\n        _id: json._id,\n        customer: json.customer,\n        entities: json.entities,\n        intent: json.intent,\n        messages: json.messages,\n      })\n    );\n  }\n\n  send(text) {\n    return fetch(`/api/chats/${this.state._id}/messages`, {\n      method: 'POST',\n      credentials: 'same-origin',\n      body: JSON.stringify({text: text}),\n    }).then(\n      response => {\n        if (response.ok) {\n          this.setState({\n            messages: this.state.messages.push(response.json()),\n          });\n        }\n      }\n    );\n  }\n\n  predict() {\n    return fetch(`/api/chats/${this.state._id}/predict`, {\n      method: 'POST',\n      credentials: 'same-origin',\n    }).then(\n      response => response.ok ? response.json() : {\n        entities: this.state.entities,\n        intent: this.state.intent,\n      }\n    ).then(\n      json => this.setState({\n        entities: json.entities,\n        intent: json.intent,\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"Chat\">\n        <Container>\n          <Row>\n            <Col xs=\"8\">\n              <Messages\n                customer={this.state.customer}\n                messages={this.state.messages}\n              />\n            </Col>\n            <Col xs={{ offset: 1, size: 3 }}>\n              <Predictions\n                entities={this.state.entities}\n                intent={this.state.intent}\n              />\n            </Col>\n          </Row>\n        </Container>\n        <Footer\n          send={this.send}\n          predict={this.predict}\n        />\n      </div>\n    );\n  }\n}\n\nfunction Messages(props) {\n  let messages = [];\n\n  for (let i = 0; i < props.messages.length; i++) {\n    messages.push(\n      <Message\n        customer={props.customer}\n        message={props.messages[i]}\n      />\n    );\n  }\n\n  return <div className=\"Messages\">{messages}</div>;\n}\n\nfunction Message(props) {\n  if (props.message.sender === 'customer') {\n    return (\n      <div className=\"Message\">\n        <Row className=\"align-items-center h-100\">\n          <Col xs=\"4\" className=\"text-center\">\n            <strong>{props.customer.first_name}</strong><br />\n            <Timestamp\n              time={props.message.timestamp / 1000} format='time'\n            />\n          </Col>\n          <Col xs=\"8\">\n            <Card body outline color=\"primary\">\n              <CardText>{props.message.text}</CardText>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n } else {\n    return (\n      <div className=\"Message\">\n        <Row className=\"align-items-center h-100\">\n          <Col xs=\"8\">\n            <Card body outline color=\"secondary\">\n              <CardText>{props.message.text}</CardText>\n            </Card>\n          </Col>\n          <Col xs=\"4\" className=\"text-center\">\n            <strong>You</strong><br />\n            <Timestamp\n              time={props.message.timestamp / 1000} format='time'\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n }\n}\n\nfunction Predictions(props) {\n  return (\n    <div className=\"Predictions\">\n      {props.intent !== null && <Intent intent={props.intent} />}\n      <Entities entities={props.entities} />\n    </div>\n  );\n}\n\nfunction Intent(props) {\n  return (\n    <div className=\"Intent\">\n      <h2>Intent</h2>\n      <ListGroup>\n        <ListGroupItem>{props.intent}</ListGroupItem>\n      </ListGroup>\n    </div>\n  );\n}\n\nfunction Entities(props) {\n  let entities = [];\n\n  for (let i = 0; i < props.entities.length; i++) {\n    entities.push(\n      <ListGroupItem>\n        <Badge color=\"primary\" pill>{props.entities[i].type}</Badge>\n        <span className=\"float-right\">\"{props.entities[i].snippet}\"</span>\n      </ListGroupItem>\n    );\n  }\n\n  return (\n    <div className=\"Entities\">\n      <h2>Entities</h2>\n      <ListGroup>{entities}</ListGroup>\n    </div>\n  );\n}\n\nclass Footer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: '',\n    }\n\n    this.handleSendChange = this.handleSendChange.bind(this);\n    this.handleSendClick = this.handleSendClick.bind(this);\n    this.handlePredictClick = this.handlePredictClick.bind(this);\n  }\n\n  handleSendChange(event) {\n    event.preventDefault();\n\n    this.setState({text: event.target.value});\n  }\n\n  handleSendClick(event) {\n    event.preventDefault();\n\n    this.props.send(this.state.text).then(\n      () => this.setState({text: ''})\n    );\n  }\n\n  handlePredictClick(event) {\n    event.preventDefault();\n\n    this.props.predict();\n  }\n\n  render() {\n    return (\n      <div className=\"Footer\">\n        <Navbar dark color=\"primary\" expand=\"xs\" fixed=\"bottom\">\n          <Container>\n            <InputGroup size=\"lg\" className=\"mr-3\">\n              <Input\n                type=\"text\" value={this.state.text}\n                onChange={this.handleSendChange}\n              />\n              <InputGroupAddon addonType=\"append\">\n                <Button color=\"success\" onClick={this.handleSendClick}>\n                  Send\n                </Button>\n              </InputGroupAddon>\n            </InputGroup>\n            <Button color=\"danger\" size=\"lg\" onClick={this.handlePredictClick}>\n              Predict\n            </Button>\n          </Container>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardText,\n  CardTitle,\n  Col,\n  Container,\n  Row,\n} from 'reactstrap';\n\nimport './Dashboard.css'\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chats: [],\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => this.fetchChats(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  fetchChats() {\n    fetch('/api/chats', {\n      'method': 'GET',\n      'credentials': 'same-origin',\n    }).then(\n      response => response.ok ? response.json() : []\n    ).then(\n      json => this.setState({chats: json})\n    )\n  }\n\n  toRows(chats) {\n    let rows = [];\n\n    for (let i = 0; i < chats.length; i = i + 3) {\n      let cols = [];\n\n      for (let j = i; j < chats.length && j < i + 3; j++) {\n        cols.push(this.toCol(chats[j]));\n      }\n\n      rows.push(<Row>{cols}</Row>);\n    }\n\n    return <div className=\"Rows\">{rows}</div>;\n  }\n\n  toCol(chat) {\n    return (\n      <Col xs=\"4\">\n        <Card>\n          <CardBody>\n            <CardTitle tag=\"h2\">{chat.customer.full_name}</CardTitle>\n            <CardText>{chat.message.text}</CardText>\n            <Button onClick={() => this.handleClick(chat.message._id)}\n              color=\"success\">\n              Accept\n            </Button>\n          </CardBody>\n        </Card>\n      </Col>\n    )\n  }\n\n  handleClick(id) {\n    fetch(`/api/chats/${id}/employees`, {\n      method: 'POST',\n      credentials: 'same-origin',\n    }).then(\n      response => {\n        if (response.ok) {\n          this.context.router.history.push(`/chats/${id}`);\n        }\n      }\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"Dashboard\">\n        <Container>\n          {this.toRows(this.state.chats)}\n        </Container>\n      </div>\n    );\n  }\n}\n\nDashboard.contextTypes = {\n  router: PropTypes.object.isRequired,\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport Chat from './Chat';\nimport Dashboard from './Dashboard';\n\nclass Chats extends React.Component {\n  render() {\n    const { match } = this.props;\n\n    return (\n      <div className=\"Chats\">\n        <Route path={match.path} exact component={Dashboard} />\n        <Route path={`${match.path}/:id`} component={Chat} />\n      </div>\n    );\n  }\n}\n\nexport default Chats;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Container, Nav, NavItem, NavLink, Navbar } from 'reactstrap';\n\nimport './Header.css';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n\n    this.props.logoutEmployee().then(\n      () => this.context.router.history.push('/')\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"Header\">\n        <Navbar dark color=\"primary\" expand=\"xs\">\n          <Container>\n            <h1 className=\"navbar-text\">Contoso ACE</h1>\n            {this.props.employee !== null &&\n              <Nav navbar>\n                <NavItem className=\"navbar-text mr-3\">\n                  Hello, {this.props.employee.first_name}!\n                </NavItem>\n                <NavItem>\n                  <NavLink onClick={this.handleClick}>\n                    Sign Out\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            }\n          </Container>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nHeader.contextTypes = {\n  router: PropTypes.object.isRequired,\n};\n\nexport default Header;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  Col,\n  Container,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  Row,\n} from 'reactstrap';\n\nimport './Login.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    const formData = new FormData(event.target);\n\n    this.props.loginEmployee(\n      formData.get('Email'),\n      formData.get('Password'),\n    ).then(\n      () => this.context.router.history.push('/chats')\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"Login\">\n        <Container>\n          <Row>\n            <Col xs={{ offset: 3, size: 6 }}>\n              <Card>\n                <CardBody>\n                  <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                      <Label for=\"Email\">Email</Label>\n                      <Input\n                        type=\"email\" name=\"Email\" id=\"Email\"\n                        placeholder=\"barbara@contoso.com\"\n                      />\n                    </FormGroup>\n                    <FormGroup>\n                      <Label for=\"Password\">Password</Label>\n                      <Input type=\"password\" name=\"Password\" id=\"Password\" />\n                    </FormGroup>\n                    <Button type=\"submit\" color=\"primary\">Sign In</Button>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nLogin.contextTypes = {\n  router: PropTypes.object.isRequired,\n};\n\nexport default Login;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Chats from './Chats';\nimport Header from './Header';\nimport Login from './Login';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      employee: null,\n    };\n\n    this.loginEmployee = this.loginEmployee.bind(this);\n    this.logoutEmployee = this.logoutEmployee.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchEmployee();\n  }\n\n  fetchEmployee() {\n    return fetch('/api/employees/current', {\n      method: 'GET',\n      credentials: 'same-origin',\n    }).then(\n      response => response.ok ? response.json() : null\n    ).then(\n      json => this.setState({employee: json})\n    );\n  }\n\n  loginEmployee(email, password) {\n    return fetch('/api/employees/login', {\n      method: 'POST',\n      credentials: 'same-origin',\n      body: JSON.stringify({\n        email: email,\n        password: password,\n      }),\n    }).then(\n      response => {\n        if (response.ok) {\n          this.fetchEmployee();\n        }\n      }\n    );\n  }\n\n  logoutEmployee() {\n    return fetch('/api/employees/logout', {\n      method: 'POST',\n      credentials: 'same-origin',\n    }).then(\n      response => response.ok ? null : this.state.employee\n    ).then(\n      json => this.setState({employee: json})\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <div className=\"Router\">\n            <Header\n              employee={this.state.employee}\n              logoutEmployee={this.logoutEmployee}\n            />\n            <Route\n              path=\"/\" exact\n              render={\n                props => <Login\n                           {...props}\n                           loginEmployee={this.loginEmployee}\n                         />\n              }\n            />\n            <Route path=\"/chats\" component={Chats} />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}