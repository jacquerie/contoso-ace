{"version":3,"sources":["Chat.js","Dashboard.js","Chats.js","Header.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["Chat","match","this","props","react_default","a","createElement","className","params","id","React","Component","Dashboard","Chats","Route","path","exact","component","concat","Header","Navbar","dark","color","expand","Container","Nav","navbar","NavItem","NavLink","href","Login","Row","Col","xs","offset","size","Card","CardBody","Form","FormGroup","Label","for","Input","type","name","placeholder","Button","App","src_Header_0","BrowserRouter","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAceA,mLAXJ,IACCC,EAAUC,KAAKC,MAAfF,MAER,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,mBAAWL,EAAMO,OAAOC,YANbC,IAAMC,WCUVC,mLARX,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,+BAJgBI,IAAMC,WCiBfE,mLAZJ,IACCZ,EAAUC,KAAKC,MAAfF,MAER,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,KAAMd,EAAMc,KAAMC,OAAK,EAACC,UAAWL,IAC1CR,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,KAAI,GAAAG,OAAKjB,EAAMc,KAAX,QAAuBE,UAAWjB,YAPjCU,IAAMC,mDCmBXQ,0LAlBX,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQC,MAAI,EAACC,MAAM,UAAUC,OAAO,MAClCnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACEpB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,eACAH,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAKC,QAAM,GACTtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAASpB,UAAU,oBAAnB,mBACAH,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAASC,KAAK,KAAd,wBAVKnB,IAAMC,oFC4CZmB,0LA/BX,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACEpB,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KACE3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAKC,GAAI,CAAEC,OAAQ,EAAGC,KAAM,IAC1B/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACAhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACAjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACElC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACEnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAOC,IAAI,SAAX,SACArC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CACEC,KAAK,QAAQC,KAAK,QAAQnC,GAAG,QAC7BoC,YAAY,yBAGhBzC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACEnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAOC,IAAI,YAAX,YACArC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOC,KAAK,WAAWC,KAAK,WAAWnC,GAAG,cAE5CL,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAQxB,MAAM,WAAd,yBArBIZ,IAAMC,YCOXoC,mLAdX,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC0C,EAAD,MACA5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWa,IACjC1B,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,KAAK,SAASE,UAAWJ,cAR1BH,IAAMC,WCKJuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpD,MACvB,uECRNqD,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6d6427a4.chunk.js","sourcesContent":["import React from 'react';\n\nclass Chat extends React.Component {\n  render() {\n    const { match } = this.props;\n\n    return (\n      <div className=\"Chat\">\n        <h2>Chat #{match.params.id}</h2>\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n","import React from 'react';\n\nclass Dashboard extends React.Component {\n  render() {\n    return (\n      <div className=\"Dashboard\">\n        <h2>Dashboard</h2>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport Chat from './Chat';\nimport Dashboard from './Dashboard';\n\nclass Chats extends React.Component {\n  render() {\n    const { match } = this.props;\n\n    return (\n      <div className=\"Chats\">\n        <Route path={match.path} exact component={Dashboard} />\n        <Route path={`${match.path}/:id`} component={Chat} />\n      </div>\n    );\n  }\n}\n\nexport default Chats;\n","import React from 'react';\nimport { Container, Nav, NavItem, NavLink, Navbar } from 'reactstrap';\n\nimport './Header.css';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div className=\"Header\">\n        <Navbar dark color=\"primary\" expand=\"xs\">\n          <Container>\n            <h1 className=\"navbar-text\">Contoso ACE</h1>\n            <Nav navbar>\n              <NavItem className=\"navbar-text mr-3\">Hello, Barbara!</NavItem>\n              <NavItem>\n                <NavLink href=\"#\">Sign Out</NavLink>\n              </NavItem>\n            </Nav>\n          </Container>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  Col,\n  Container,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  Row,\n} from 'reactstrap';\n\nimport './Login.css';\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <div className=\"Login\">\n        <Container>\n          <Row>\n            <Col xs={{ offset: 3, size: 6 }}>\n              <Card>\n              <CardBody>\n              <Form>\n                <FormGroup>\n                  <Label for=\"Email\">Email</Label>\n                  <Input\n                    type=\"email\" name=\"Email\" id=\"Email\"\n                    placeholder=\"barbara@contoso.com\"\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"Password\">Password</Label>\n                  <Input type=\"password\" name=\"Password\" id=\"Password\" />\n                </FormGroup>\n                <Button color=\"primary\">Sign In</Button>\n              </Form>\n              </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Chats from './Chats';\nimport Header from './Header';\nimport Login from './Login';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Router>\n          <div className=\"Router\">\n            <Route path=\"/\" exact component={Login} />\n            <Route path=\"/chats\" component={Chats} />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}