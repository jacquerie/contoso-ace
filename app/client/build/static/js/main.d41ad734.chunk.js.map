{"version":3,"sources":["Chat.js","Dashboard.js","Chats.js","Header.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["Messages","props","messages","i","length","push","react_default","a","createElement","Message","customer","message","className","sender","Row","Col","xs","first_name","timestamp_default","time","timestamp","format","Card","body","outline","color","CardText","text","Predictions","intent","Intent","Entities","entities","ListGroup","ListGroupItem","Badge","pill","type","snippet","Chat","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_id","match","params","id","_this2","timer","setInterval","fetchChat","clearInterval","_this3","fetch","concat","method","credentials","then","response","ok","json","setState","Container","offset","size","React","Component","Dashboard","chats","handleClick","bind","assertThisInitialized","fetchChats","rows","cols","j","toCol","chat","_this4","CardBody","CardTitle","tag","full_name","Button","onClick","_this5","context","router","history","toRows","contextTypes","PropTypes","object","isRequired","Chats","Route","path","exact","component","Header","event","preventDefault","logoutEmployee","Navbar","dark","expand","employee","Nav","navbar","NavItem","NavLink","Login","handleSubmit","formData","FormData","target","loginEmployee","get","Form","onSubmit","FormGroup","Label","for","Input","name","placeholder","App","fetchEmployee","email","password","JSON","stringify","BrowserRouter","src_Header_0","render","src_Login_0","assign","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d41ad734.chunk.js","sourcesContent":["import React from 'react';\nimport Timestamp from 'react-timestamp';\nimport {\n  Badge,\n  Card,\n  CardText,\n  Col,\n  Container,\n  ListGroup,\n  ListGroupItem,\n  Row,\n} from 'reactstrap';\n\nimport './Chat.css';\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      _id: this.props.match.params.id,\n      customer: {},\n      entities: [],\n      intent: null,\n      messages: [],\n    };\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => this.fetchChat(this.state._id), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  fetchChat(id) {\n    return fetch(`/api/chats/${id}`, {\n      method: 'GET',\n      credentials: 'same-origin',\n    }).then(\n      response => response.ok ? response.json() : {\n        _id: id,\n        customer: {},\n        entities: [],\n        intent: null,\n        messages: [],\n      }\n    ).then(\n      json => this.setState({\n        _id: json._id,\n        customer: json.customer,\n        entities: json.entities,\n        intent: json.intent,\n        messages: json.messages,\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"Chat\">\n        <Container>\n          <Row>\n            <Col xs=\"8\">\n              <Messages\n                customer={this.state.customer}\n                messages={this.state.messages}\n              />\n            </Col>\n            <Col xs={{ offset: 1, size: 3 }}>\n              <Predictions\n                entities={this.state.entities}\n                intent={this.state.intent}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nfunction Messages(props) {\n  let messages = [];\n\n  for (let i = 0; i < props.messages.length; i++) {\n    messages.push(\n      <Message\n        customer={props.customer}\n        message={props.messages[i]}\n      />\n    );\n  }\n\n  return <div className=\"Messages\">{messages}</div>;\n}\n\nfunction Message(props) {\n  if (props.message.sender === 'customer') {\n    return (\n      <div className=\"Message\">\n        <Row className=\"align-items-center h-100\">\n          <Col xs=\"4\" className=\"text-center\">\n            <strong>{props.customer.first_name}</strong><br />\n            <Timestamp\n              time={props.message.timestamp / 1000} format='time'\n            />\n          </Col>\n          <Col xs=\"8\">\n            <Card body outline color=\"primary\">\n              <CardText>{props.message.text}</CardText>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n } else {\n    return (\n      <div className=\"Message\">\n        <Row className=\"align-items-center h-100\">\n          <Col xs=\"8\">\n            <Card body outline color=\"secondary\">\n              <CardText>{props.message.text}</CardText>\n            </Card>\n          </Col>\n          <Col xs=\"4\" className=\"text-center\">\n            <strong>You</strong><br />\n            <Timestamp\n              time={props.message.timestamp / 1000} format='time'\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n }\n}\n\nfunction Predictions(props) {\n  return (\n    <div className=\"Predictions\">\n      {props.intent !== null && <Intent intent={props.intent} />}\n      <Entities entities={props.entities} />\n    </div>\n  );\n}\n\nfunction Intent(props) {\n  return (\n    <div className=\"Intent\">\n      <h2>Intent</h2>\n      <ListGroup>\n        <ListGroupItem>{props.intent}</ListGroupItem>\n      </ListGroup>\n    </div>\n  );\n}\n\nfunction Entities(props) {\n  let entities = [];\n\n  for (let i = 0; i < props.entities.length; i++) {\n    entities.push(\n      <ListGroupItem>\n        <Badge color=\"primary\" pill>{props.entities[i].type}</Badge>\n        <span className=\"float-right\">\"{props.entities[i].snippet}\"</span>\n      </ListGroupItem>\n    );\n  }\n\n  return (\n    <div className=\"Entities\">\n      <h2>Entities</h2>\n      <ListGroup>{entities}</ListGroup>\n    </div>\n  );\n}\n\nexport default Chat;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardText,\n  CardTitle,\n  Col,\n  Container,\n  Row,\n} from 'reactstrap';\n\nimport './Dashboard.css'\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chats: [],\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => this.fetchChats(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  fetchChats() {\n    fetch('/api/chats', {\n      'method': 'GET',\n      'credentials': 'same-origin',\n    }).then(\n      response => response.ok ? response.json() : []\n    ).then(\n      json => this.setState({chats: json})\n    )\n  }\n\n  toRows(chats) {\n    let rows = [];\n\n    for (let i = 0; i < chats.length; i = i + 3) {\n      let cols = [];\n\n      for (let j = i; j < chats.length && j < i + 3; j++) {\n        cols.push(this.toCol(chats[j]));\n      }\n\n      rows.push(<Row>{cols}</Row>);\n    }\n\n    return <div className=\"Rows\">{rows}</div>;\n  }\n\n  toCol(chat) {\n    return (\n      <Col xs=\"4\">\n        <Card>\n          <CardBody>\n            <CardTitle tag=\"h2\">{chat.customer.full_name}</CardTitle>\n            <CardText>{chat.message.text}</CardText>\n            <Button onClick={() => this.handleClick(chat.message._id)}\n              color=\"success\">\n              Accept\n            </Button>\n          </CardBody>\n        </Card>\n      </Col>\n    )\n  }\n\n  handleClick(id) {\n    fetch(`/api/chats/${id}/employees`, {\n      method: 'POST',\n      credentials: 'same-origin',\n    }).then(\n      response => {\n        if (response.ok) {\n          this.context.router.history.push(`/chats/${id}`);\n        }\n      }\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"Dashboard\">\n        <Container>\n          {this.toRows(this.state.chats)}\n        </Container>\n      </div>\n    );\n  }\n}\n\nDashboard.contextTypes = {\n  router: PropTypes.object.isRequired,\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport Chat from './Chat';\nimport Dashboard from './Dashboard';\n\nclass Chats extends React.Component {\n  render() {\n    const { match } = this.props;\n\n    return (\n      <div className=\"Chats\">\n        <Route path={match.path} exact component={Dashboard} />\n        <Route path={`${match.path}/:id`} component={Chat} />\n      </div>\n    );\n  }\n}\n\nexport default Chats;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Container, Nav, NavItem, NavLink, Navbar } from 'reactstrap';\n\nimport './Header.css';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n\n    this.props.logoutEmployee().then(\n      () => this.context.router.history.push('/')\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"Header\">\n        <Navbar dark color=\"primary\" expand=\"xs\">\n          <Container>\n            <h1 className=\"navbar-text\">Contoso ACE</h1>\n            {this.props.employee !== null &&\n              <Nav navbar>\n                <NavItem className=\"navbar-text mr-3\">\n                  Hello, {this.props.employee.first_name}!\n                </NavItem>\n                <NavItem>\n                  <NavLink onClick={this.handleClick}>\n                    Sign Out\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            }\n          </Container>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nHeader.contextTypes = {\n  router: PropTypes.object.isRequired,\n};\n\nexport default Header;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  Col,\n  Container,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  Row,\n} from 'reactstrap';\n\nimport './Login.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    const formData = new FormData(event.target);\n\n    this.props.loginEmployee(\n      formData.get('Email'),\n      formData.get('Password'),\n    ).then(\n      () => this.context.router.history.push('/chats')\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"Login\">\n        <Container>\n          <Row>\n            <Col xs={{ offset: 3, size: 6 }}>\n              <Card>\n                <CardBody>\n                  <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                      <Label for=\"Email\">Email</Label>\n                      <Input\n                        type=\"email\" name=\"Email\" id=\"Email\"\n                        placeholder=\"barbara@contoso.com\"\n                      />\n                    </FormGroup>\n                    <FormGroup>\n                      <Label for=\"Password\">Password</Label>\n                      <Input type=\"password\" name=\"Password\" id=\"Password\" />\n                    </FormGroup>\n                    <Button type=\"submit\" color=\"primary\">Sign In</Button>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nLogin.contextTypes = {\n  router: PropTypes.object.isRequired,\n};\n\nexport default Login;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Chats from './Chats';\nimport Header from './Header';\nimport Login from './Login';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      employee: null,\n    };\n\n    this.loginEmployee = this.loginEmployee.bind(this);\n    this.logoutEmployee = this.logoutEmployee.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchEmployee();\n  }\n\n  fetchEmployee() {\n    return fetch('/api/employees/current', {\n      method: 'GET',\n      credentials: 'same-origin',\n    }).then(\n      response => response.ok ? response.json() : null\n    ).then(\n      json => this.setState({employee: json})\n    );\n  }\n\n  loginEmployee(email, password) {\n    return fetch('/api/employees/login', {\n      method: 'POST',\n      credentials: 'same-origin',\n      body: JSON.stringify({\n        email: email,\n        password: password,\n      }),\n    }).then(\n      response => {\n        if (response.ok) {\n          this.fetchEmployee();\n        }\n      }\n    );\n  }\n\n  logoutEmployee() {\n    return fetch('/api/employees/logout', {\n      method: 'POST',\n      credentials: 'same-origin',\n    }).then(\n      response => response.ok ? null : this.state.employee\n    ).then(\n      json => this.setState({employee: json})\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <div className=\"Router\">\n            <Header\n              employee={this.state.employee}\n              logoutEmployee={this.logoutEmployee}\n            />\n            <Route\n              path=\"/\" exact\n              render={\n                props => <Login\n                           {...props}\n                           loginEmployee={this.loginEmployee}\n                         />\n              }\n            />\n            <Route path=\"/chats\" component={Chats} />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}