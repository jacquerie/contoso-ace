{"version":3,"sources":["Footer.js","Chat.js","Dashboard.js","Chats.js","Header.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["Footer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","handleSendChange","bind","assertThisInitialized","handleSendClick","handleSendKeyPress","handlePredictClick","event","setState","target","value","_this2","send","then","_this3","key","predict","react_default","a","createElement","className","Navbar","dark","color","expand","fixed","Container","InputGroup","size","Input","type","onChange","onKeyPress","InputGroupAddon","addonType","Button","onClick","React","Component","Messages","messages","i","length","push","Message","customer","message","sender","Row","Col","xs","first_name","timestamp_default","time","timestamp","format","Card","body","style","backgroundColor","borderColor","CardText","outline","Predictions","intent","Intent","entities","Entities","ListGroup","ListGroupItem","Badge","pill","snippet","Chat","_id","match","params","id","loading","fetchChat","timer","setInterval","clearInterval","fetch","concat","method","credentials","response","ok","json","_this4","JSON","stringify","_this5","lib","offset","src_Footer_0","Dashboard","chats","handleClick","fetchChats","rows","cols","j","toCol","chat","CardTitle","tag","full_name","context","router","history","toRows","contextTypes","PropTypes","object","isRequired","Chats","Route","path","exact","component","Header","logoutEmployee","employee","Nav","navbar","NavItem","NavLink","Login","email","password","handleEmailChange","handlePasswordChange","handleSubmit","preventDefault","loginEmployee","Form","onSubmit","FormGroup","Label","for","name","placeholder","App","fetchEmployee","BrowserRouter","src_Header_0","render","src_Login_0","assign","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6fcd1059.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Button,\n  Container,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  Navbar\n} from 'reactstrap';\n\nimport './Footer.css';\n\nclass Footer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: ''\n    };\n\n    this.handleSendChange = this.handleSendChange.bind(this);\n    this.handleSendClick = this.handleSendClick.bind(this);\n    this.handleSendKeyPress = this.handleSendKeyPress.bind(this);\n    this.handlePredictClick = this.handlePredictClick.bind(this);\n  }\n\n  handleSendChange(event) {\n    this.setState({ text: event.target.value });\n  }\n\n  handleSendClick(event) {\n    this.props.send(this.state.text).then(() => this.setState({ text: '' }));\n  }\n\n  handleSendKeyPress(event) {\n    if (event.key === 'Enter') {\n      this.props.send(this.state.text).then(() => this.setState({ text: '' }));\n    }\n  }\n\n  handlePredictClick(event) {\n    this.props.predict();\n  }\n\n  render() {\n    return (\n      <div className=\"Footer\">\n        <Navbar dark color=\"primary\" expand=\"xs\" fixed=\"bottom\">\n          <Container>\n            <InputGroup size=\"lg\" className=\"mr-3\">\n              <Input\n                type=\"text\"\n                value={this.state.text}\n                onChange={this.handleSendChange}\n                onKeyPress={this.handleSendKeyPress}\n              />\n              <InputGroupAddon addonType=\"append\">\n                <Button color=\"success\" onClick={this.handleSendClick}>\n                  Send\n                </Button>\n              </InputGroupAddon>\n            </InputGroup>\n            <Button color=\"danger\" size=\"lg\" onClick={this.handlePredictClick}>\n              Predict\n            </Button>\n          </Container>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React from 'react';\nimport { CircleSpinner } from 'react-spinners-kit';\nimport Timestamp from 'react-timestamp';\nimport {\n  Badge,\n  Card,\n  CardText,\n  Col,\n  Container,\n  ListGroup,\n  ListGroupItem,\n  Row\n} from 'reactstrap';\n\nimport Footer from './Footer';\n\nimport './Chat.css';\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      _id: this.props.match.params.id,\n      customer: {},\n      entities: [],\n      intent: null,\n      loading: true,\n      messages: []\n    };\n\n    this.fetchChat = this.fetchChat.bind(this);\n    this.send = this.send.bind(this);\n    this.predict = this.predict.bind(this);\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => this.fetchChat(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  fetchChat() {\n    return fetch(`/api/chats/${this.state._id}`, {\n      method: 'GET',\n      credentials: 'same-origin'\n    })\n      .then(response =>\n        response.ok\n          ? response.json()\n          : {\n              _id: this.state._id,\n              customer: {},\n              entities: [],\n              intent: null,\n              messages: []\n            }\n      )\n      .then(json =>\n        this.setState({\n          _id: json._id,\n          customer: json.customer,\n          entities: json.entities,\n          intent: json.intent,\n          messages: json.messages\n        })\n      )\n      .then(() => this.setState({ loading: false }));\n  }\n\n  send(text) {\n    return fetch(`/api/chats/${this.state._id}/messages`, {\n      method: 'POST',\n      credentials: 'same-origin',\n      body: JSON.stringify({ text: text })\n    }).then(response => {\n      if (response.ok) {\n        this.setState({\n          messages: this.state.messages.concat(response.json())\n        });\n      }\n    });\n  }\n\n  predict() {\n    return fetch(`/api/chats/${this.state._id}/predict`, {\n      method: 'POST',\n      credentials: 'same-origin'\n    })\n      .then(response =>\n        response.ok\n          ? response.json()\n          : {\n              entities: this.state.entities,\n              intent: this.state.intent\n            }\n      )\n      .then(json =>\n        this.setState({\n          entities: json.entities,\n          intent: json.intent\n        })\n      );\n  }\n\n  render() {\n    return (\n      <div className=\"Chat\">\n        <Container>\n          {this.state.loading ? (\n            <div className=\"d-flex flex-wrap justify-content-center\">\n              <CircleSpinner color=\"#0077ff\" size=\"96\" />\n            </div>\n          ) : (\n            <Row>\n              <Col xs=\"8\">\n                <Messages\n                  customer={this.state.customer}\n                  messages={this.state.messages}\n                />\n              </Col>\n              <Col xs={{ offset: 1, size: 3 }}>\n                <Predictions\n                  entities={this.state.entities}\n                  intent={this.state.intent}\n                />\n              </Col>\n            </Row>\n          )}\n        </Container>\n        <Footer send={this.send} predict={this.predict} />\n      </div>\n    );\n  }\n}\n\nfunction Messages(props) {\n  let messages = [];\n\n  for (let i = 0; i < props.messages.length; i++) {\n    messages.push(\n      <Message customer={props.customer} message={props.messages[i]} />\n    );\n  }\n\n  return <div className=\"Messages\">{messages}</div>;\n}\n\nfunction Message(props) {\n  if (props.message.sender === 'customer') {\n    return (\n      <div className=\"Message\">\n        <Row className=\"align-items-center h-100\">\n          <Col xs=\"4\" className=\"text-center\">\n            <strong>{props.customer.first_name}</strong>\n            <br />\n            <Timestamp time={props.message.timestamp / 1000} format=\"time\" />\n          </Col>\n          <Col xs=\"8\">\n            <Card\n              body\n              style={{\n                backgroundColor: 'rgba(0, 123, 255, 0.1)',\n                borderColor: 'rgba(0, 123, 255)'\n              }}\n            >\n              <CardText>{props.message.text}</CardText>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"Message\">\n        <Row className=\"align-items-center h-100\">\n          <Col xs=\"8\">\n            <Card body outline color=\"secondary\">\n              <CardText>{props.message.text}</CardText>\n            </Card>\n          </Col>\n          <Col xs=\"4\" className=\"text-center\">\n            <strong>You</strong>\n            <br />\n            <Timestamp time={props.message.timestamp / 1000} format=\"time\" />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nfunction Predictions(props) {\n  return (\n    <div className=\"Predictions\">\n      {props.intent !== null && <Intent intent={props.intent} />}\n      {props.entities.length > 0 && <Entities entities={props.entities} />}\n    </div>\n  );\n}\n\nfunction Intent(props) {\n  return (\n    <div className=\"Intent\">\n      <h2>Intent</h2>\n      <ListGroup>\n        <ListGroupItem>{props.intent}</ListGroupItem>\n      </ListGroup>\n    </div>\n  );\n}\n\nfunction Entities(props) {\n  let entities = [];\n\n  for (let i = 0; i < props.entities.length; i++) {\n    entities.push(\n      <ListGroupItem>\n        <Badge color=\"primary\" pill>\n          {props.entities[i].type}\n        </Badge>\n        <span className=\"float-right\">\"{props.entities[i].snippet}\"</span>\n      </ListGroupItem>\n    );\n  }\n\n  return (\n    <div className=\"Entities\">\n      <h2>Entities</h2>\n      <ListGroup>{entities}</ListGroup>\n    </div>\n  );\n}\n\nexport default Chat;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { CircleSpinner } from 'react-spinners-kit';\nimport {\n  Button,\n  Card,\n  CardText,\n  CardTitle,\n  Col,\n  Container,\n  Row\n} from 'reactstrap';\n\nimport './Dashboard.css';\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chats: [],\n      loading: true\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => this.fetchChats(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  fetchChats() {\n    fetch('/api/chats', {\n      method: 'GET',\n      credentials: 'same-origin'\n    })\n      .then(response => (response.ok ? response.json() : []))\n      .then(json => this.setState({ chats: json }))\n      .then(() => this.setState({ loading: false }));\n  }\n\n  toRows(chats) {\n    let rows = [];\n\n    for (let i = 0; i < chats.length; i = i + 3) {\n      let cols = [];\n\n      for (let j = i; j < chats.length && j < i + 3; j++) {\n        cols.push(this.toCol(chats[j]));\n      }\n\n      rows.push(<Row>{cols}</Row>);\n    }\n\n    return <div className=\"Rows\">{rows}</div>;\n  }\n\n  toCol(chat) {\n    return (\n      <Col xs=\"4\">\n        <Card body>\n          <CardTitle tag=\"h2\">{chat.customer.full_name}</CardTitle>\n          <CardText>{chat.message.text}</CardText>\n          <Button onClick={() => this.handleClick(chat._id)} color=\"success\">\n            Accept\n          </Button>\n        </Card>\n      </Col>\n    );\n  }\n\n  handleClick(id) {\n    fetch(`/api/chats/${id}/employees`, {\n      method: 'POST',\n      credentials: 'same-origin'\n    }).then(response => {\n      if (response.ok) {\n        this.context.router.history.push(`/chats/${id}`);\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Dashboard\">\n        <Container>\n          {this.state.loading ? (\n            <div className=\"d-flex flex-wrap justify-content-center\">\n              <CircleSpinner color=\"#0077ff\" size=\"96\" />\n            </div>\n          ) : (\n            this.toRows(this.state.chats)\n          )}\n        </Container>\n      </div>\n    );\n  }\n}\n\nDashboard.contextTypes = {\n  router: PropTypes.object.isRequired\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport Chat from './Chat';\nimport Dashboard from './Dashboard';\n\nclass Chats extends React.Component {\n  render() {\n    const { match } = this.props;\n\n    return (\n      <div className=\"Chats\">\n        <Route path={match.path} exact component={Dashboard} />\n        <Route path={`${match.path}/:id`} component={Chat} />\n      </div>\n    );\n  }\n}\n\nexport default Chats;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Container, Nav, NavItem, NavLink, Navbar } from 'reactstrap';\n\nimport './Header.css';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.props\n      .logoutEmployee()\n      .then(() => this.context.router.history.push('/'));\n  }\n\n  render() {\n    return (\n      <div className=\"Header\">\n        <Navbar dark color=\"primary\" expand=\"xs\">\n          <Container>\n            <h1 className=\"navbar-text\">Contoso ACE</h1>\n            {this.props.employee !== null && (\n              <Nav navbar>\n                <NavItem className=\"navbar-text mr-3\">\n                  Hello, {this.props.employee.first_name}!\n                </NavItem>\n                <NavItem>\n                  <NavLink onClick={this.handleClick}>Sign Out</NavLink>\n                </NavItem>\n              </Nav>\n            )}\n          </Container>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nHeader.contextTypes = {\n  router: PropTypes.object.isRequired\n};\n\nexport default Header;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  Button,\n  Card,\n  Col,\n  Container,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  Row\n} from 'reactstrap';\n\nimport './Login.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: ''\n    };\n\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleEmailChange(event) {\n    this.setState({ email: event.target.value });\n  }\n\n  handlePasswordChange(event) {\n    this.setState({ password: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    this.props\n      .loginEmployee(this.state.email, this.state.password)\n      .then(() => this.context.router.history.push('/chats'));\n  }\n\n  render() {\n    return (\n      <div className=\"Login\">\n        <Container>\n          <Row>\n            <Col xs={{ offset: 3, size: 6 }}>\n              <Card body>\n                <Form onSubmit={this.handleSubmit}>\n                  <FormGroup>\n                    <Label for=\"Email\">Email</Label>\n                    <Input\n                      type=\"email\"\n                      name=\"Email\"\n                      id=\"Email\"\n                      placeholder=\"barbara@contoso.com\"\n                      onChange={this.handleEmailChange}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"Password\">Password</Label>\n                    <Input\n                      type=\"password\"\n                      name=\"Password\"\n                      id=\"Password\"\n                      onChange={this.handlePasswordChange}\n                    />\n                  </FormGroup>\n                  <Button type=\"submit\" color=\"primary\">\n                    Sign In\n                  </Button>\n                </Form>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nLogin.contextTypes = {\n  router: PropTypes.object.isRequired\n};\n\nexport default Login;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Chats from './Chats';\nimport Header from './Header';\nimport Login from './Login';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      employee: null\n    };\n\n    this.loginEmployee = this.loginEmployee.bind(this);\n    this.logoutEmployee = this.logoutEmployee.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchEmployee();\n  }\n\n  fetchEmployee() {\n    return fetch('/api/employees/current', {\n      method: 'GET',\n      credentials: 'same-origin'\n    })\n      .then(response => (response.ok ? response.json() : null))\n      .then(json => this.setState({ employee: json }));\n  }\n\n  loginEmployee(email, password) {\n    return fetch('/api/employees/login', {\n      method: 'POST',\n      credentials: 'same-origin',\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    }).then(response => {\n      if (response.ok) {\n        this.fetchEmployee();\n      }\n    });\n  }\n\n  logoutEmployee() {\n    return fetch('/api/employees/logout', {\n      method: 'POST',\n      credentials: 'same-origin'\n    })\n      .then(response => (response.ok ? null : this.state.employee))\n      .then(json => this.setState({ employee: json }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <div className=\"Router\">\n            <Header\n              employee={this.state.employee}\n              logoutEmployee={this.logoutEmployee}\n            />\n            <Route\n              path=\"/\"\n              exact\n              render={props => (\n                <Login {...props} loginEmployee={this.loginEmployee} />\n              )}\n            />\n            <Route path=\"/chats\" component={Chats} />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}